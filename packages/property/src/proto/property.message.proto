syntax = 'proto3';

import "common.message.proto";
import "property.models.proto";



message QueryRelationshipRequest {
    QueryBuilder query_builder = 1;
    optional string search = 2;
    optional string property_a_id = 3;
    optional string property_b_id = 4;
    optional string type_id = 5;
    optional bool include_voided = 6;
    optional string start_date = 7;
    optional string end_date = 8;
}
message QueryRelationshipResponse {
    repeated Relationship data = 1;
    map<string, string> metadata = 2; 
}
message CreateRelationshipRequest {
    QueryBuilder query_builder = 1;
    string property_a_id = 2;
    string property_b_id = 3;
    string start_date = 4;
    optional string end_date = 5;
    string type_id = 6;
}
message UpdateRelationshipRequest {
    QueryBuilder query_builder = 1;
    optional string property_a_id = 2;
    optional string property_b_id = 3;
    optional string start_date = 4;
    optional string end_date = 5;
    optional string type_id = 6;
    string id = 7;
}
message GetRelationshipRequest {
    QueryBuilder query_builder = 1;
    string id = 2;
}
message GetRelationshipResponse {
    Relationship data = 1;
    map<string, string> metadata = 2; 
}
message DeleteRelationshipRequest {
    QueryBuilder query_builder = 1;
    string id = 2;
    optional bool purge = 3;
}
// Property status history
message QueryPropertyStatusHistoryRequest {
    QueryBuilder query_builder = 1;
    optional string search = 2;
    optional string property_id = 3;
    optional string changed_by = 4;
    optional string previous_status = 5;
    optional string new_status = 6;
}

message QueryPropertyStatusHistoryResponse {
    repeated PropertyStatusHistory data = 1;
    map<string, string> metadata = 2; 
}

message CreatePropertyStatusHistoryRequest {
    QueryBuilder query_builder = 1;
    string property_id = 2;
    optional string changed_by = 3;
    string reason = 4;
    string previous_status = 5;
    string new_status = 6;
}

message GetPropertyStatusHistoryRequest {
    QueryBuilder query_builder = 1;
    string id = 2;
}
message GetPropertyStatusHistoryResponse {
    PropertyStatusHistory data = 1;
    map<string, string> metadata = 2; 
}
message DeletePropertyStatusHistoryRequest {
    QueryBuilder query_builder = 1;
    string id = 2;
    optional bool purge = 3;
}

// Property media
message QueryPropertyMediaRequest {
    QueryBuilder query_builder = 1;
    optional string search = 2;
    optional string property_id = 3;
    optional string type = 4;
    optional int32 size = 5;
    optional string mime_type = 6;
    optional bool include_voided = 7;
}
message QueryPropertyMediaResponse {
    repeated PropertyMedia data = 1;
    map<string, string> metadata = 2; 
}

message CreatePropertyMediaRequest {
    QueryBuilder query_builder = 1;
    string property_id = 2;
    string type = 3;
    string url = 4;
    optional string title = 5;
    optional string description = 6;
    map<string, string> metadata = 7; // size ,memeType,id,e.t.c
    int32 order = 8;
}

message UpdatePropertyMediaRequest {
    QueryBuilder query_builder = 1;
    optional string property_id = 2;
    optional string type = 3;
    optional string url = 4;
    optional string title = 5;
    optional string description = 6;
    map<string, string> metadata = 7; 
    optional int32 order = 8;
    string id = 9;
}
message GetPropertyMediaRequest {
    QueryBuilder query_builder = 1;
    string id = 2;
}
message GetPropertyMediaResponse {
    PropertyMedia data = 1;
    map<string, string> metadata = 2; 
}
message DeletePropertyMediaRequest {
    QueryBuilder query_builder = 1;
    string id = 2;
    optional bool purge = 3;
}
// Property attribute
message QueryPropertyAttributeRequest {
    QueryBuilder query_builder = 1;
    optional string search = 2;
    optional string property_id = 3;
    optional string attribute_id = 4;
    optional bool include_voided = 5;
}

message QueryPropertyAttributeResponse {
    repeated PropertyAttribute data = 1;
    map<string, string> metadata = 2; 
}

message CreatePropertyAttributeRequest {
    QueryBuilder query_builder = 1;
    string property_id = 2;
    string attribute_id = 3;
    string value = 4;
}
message UpdatePropertyAttributeRequest {
    QueryBuilder query_builder = 1;
    optional string property_id = 2;
    optional string attribute_id = 3;
    optional string value = 4;
    string id = 5;
}
message GetPropertyAttributeRequest {
    QueryBuilder query_builder = 1;
    string id = 2;
}
message GetPropertyAttributeResponse {
    PropertyAttribute data = 1;
    map<string, string> metadata = 2; 
}
message DeletePropertyAttributeRequest {
    QueryBuilder query_builder = 1;
    string id = 2;
    optional bool purge = 3;
}
// Property Amenity
message QueryPropertyAmenityRequest {
    QueryBuilder query_builder = 1;
    optional string property_id = 2;
    optional string amenity_id = 3;
    optional bool include_voided = 4;
}

message QueryPropertyAmenityResponse {
    repeated PropertyAmenity data = 1;
    map<string, string> metadata = 2; 
}
message CreatePropertyAmenityRequest {
    QueryBuilder query_builder = 1;
    string property_id = 2;
    string amenity_id = 3;
}
message UpdatePropertyAmenityRequest {
    QueryBuilder query_builder = 1;
    optional string property_id = 2;
    optional string amenity_id = 3;
    string id = 4;
}
message GetPropertyAmenityRequest {
    QueryBuilder query_builder = 1;
    string id = 2;
}
message GetPropertyAmenityResponse {
    PropertyAmenity data = 1;
    map<string, string> metadata = 2; 
}
message DeletePropertyAmenityRequest {
    QueryBuilder query_builder = 1;
    string id = 2;
    optional bool purge = 3;
}
// Property category
message QueryPropertyCategoryRequest {
    QueryBuilder query_builder = 1;
    optional string property_id = 2;
    optional string category_id = 3;
    optional bool include_voided = 4;
}
message QueryPropertyCategoryResponse {
    repeated PropertyCategory data = 1;
    map<string, string> metadata = 2; 
}
message CreatePropertyCategoryRequest {
    QueryBuilder query_builder = 1;
    string property_id = 2;
    string category_id = 3;
}
message UpdatePropertyCategoryRequest {
    QueryBuilder query_builder = 1;
    optional string property_id = 2;
    optional string category_id = 3;
    string id = 4;
}
message GetPropertyCategoryRequest {
    QueryBuilder query_builder = 1;
    string id = 2;
}
message GetPropertyCategoryResponse {
    PropertyCategory data = 1;
    map<string, string> metadata = 2; 
}
message DeletePropertyCategoryRequest {
    QueryBuilder query_builder = 1;
    string id = 2;
    optional bool purge = 3;
}
// Property
message QueryPropertyRequest {
    QueryBuilder query_builder = 1;
    optional string search = 2;
    optional string organization_id = 3;
    optional bool include_voided = 4;
    optional string status = 5;
    optional string address_id = 6;
    optional bool is_virtual = 7;
    repeated string attribute_ids = 8;
    repeated string amenity_ids = 9;
    repeated string category_ids = 10;
}
message QueryPropertyResponse {
    repeated Property data = 1;
    map<string, string> metadata = 2; 
}
message CreatePropertyRequest {
    QueryBuilder query_builder = 1;
    string name = 2;
    string organization_id = 3;
    string address_id = 4;
    string created_by = 5;
    string status = 6;
    optional string description = 7;
    optional string thumbnail = 8;
    bool is_virtual = 9;
    string attributes = 10; // json string
    repeated string amenity_ids = 11;
    repeated string category_ids = 12;
}
message UpdatePropertyRequest {
    QueryBuilder query_builder = 1;
    optional string name = 2;
    optional string organization_id = 3;
    optional string address_id = 4;
    optional string created_by = 5;
    optional string status = 6;
    optional string description = 7;
    optional string thumbnail = 8;
    optional bool is_virtual = 9;
    optional string attributes = 10; // json string
    repeated string amenity_ids = 11;
    repeated string category_ids = 12;
    string id = 13;

}
message GetPropertyRequest {
    QueryBuilder query_builder = 1;
    string id = 2;
}
message GetPropertyResponse {
    Property data = 1;
    map<string, string> metadata = 2; 
}
message DeletePropertyRequest {
    QueryBuilder query_builder = 1;
    string id = 2;
    optional bool purge = 3;
}