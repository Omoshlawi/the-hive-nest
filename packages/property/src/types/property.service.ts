// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v3.20.3
// source: property.service.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import {
  CreateAmenityRequest,
  DeleteAmenityRequest,
  GetAmenityRequest,
  GetAmenityResponse,
  QueryAmenityRequest,
  QueryAmenityResponse,
  UpdateAmenityRequest,
} from "./amenity.message";

export const protobufPackage = "hive.property.v1";

export const HIVE_PROPERTY_V1_PACKAGE_NAME = "hive.property.v1";

export interface PropertyClient {
  /** amenities */

  queryAmenities(request: QueryAmenityRequest): Observable<QueryAmenityResponse>;

  getAmenity(request: GetAmenityRequest): Observable<GetAmenityResponse>;

  createAmenity(request: CreateAmenityRequest): Observable<GetAmenityResponse>;

  updateAmenity(request: UpdateAmenityRequest): Observable<GetAmenityResponse>;

  deleteAmenity(request: DeleteAmenityRequest): Observable<GetAmenityResponse>;
}

export interface PropertyController {
  /** amenities */

  queryAmenities(
    request: QueryAmenityRequest,
  ): Promise<QueryAmenityResponse> | Observable<QueryAmenityResponse> | QueryAmenityResponse;

  getAmenity(
    request: GetAmenityRequest,
  ): Promise<GetAmenityResponse> | Observable<GetAmenityResponse> | GetAmenityResponse;

  createAmenity(
    request: CreateAmenityRequest,
  ): Promise<GetAmenityResponse> | Observable<GetAmenityResponse> | GetAmenityResponse;

  updateAmenity(
    request: UpdateAmenityRequest,
  ): Promise<GetAmenityResponse> | Observable<GetAmenityResponse> | GetAmenityResponse;

  deleteAmenity(
    request: DeleteAmenityRequest,
  ): Promise<GetAmenityResponse> | Observable<GetAmenityResponse> | GetAmenityResponse;
}

export function PropertyControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["queryAmenities", "getAmenity", "createAmenity", "updateAmenity", "deleteAmenity"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("Property", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("Property", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const PROPERTY_SERVICE_NAME = "Property";
