// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.0
// source: files.service.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { DeleteRequest, GetRequest } from "./common.message";
import {
  CreateFileUsageRuleRequest,
  CreateFileUsageScopeRequest,
  GetFileUsageRuleResponse,
  GetFileUsageScopeResponse,
  QueryFileUsageRuleRequest,
  QueryFileUsageRuleResponse,
  QueryFileUsageScopeRequest,
  QueryFileUsageScopeResponse,
  UpdateFileUsageRuleRequest,
  UpdateFileUsageScopeRequest,
} from "./file-usage.message";
import { CreateFileRequest, GetFileResponse, QueryFileRequest, QueryFileResponse } from "./files.message";

export const protobufPackage = "hive.files.v1";

export const HIVE_FILES_V1_PACKAGE_NAME = "hive.files.v1";

export interface FilesClient {
  /** Files */

  queryFile(request: QueryFileRequest): Observable<QueryFileResponse>;

  getFile(request: GetRequest): Observable<GetFileResponse>;

  createFile(request: CreateFileRequest): Observable<GetFileResponse>;

  deleteFile(request: DeleteRequest): Observable<GetFileResponse>;

  /** Scope */

  queryFileUsageScope(request: QueryFileUsageScopeRequest): Observable<QueryFileUsageScopeResponse>;

  getFileUsageScope(request: GetRequest): Observable<GetFileUsageScopeResponse>;

  createFileUsageScope(request: CreateFileUsageScopeRequest): Observable<GetFileUsageScopeResponse>;

  updateFileUsageScope(request: UpdateFileUsageScopeRequest): Observable<GetFileUsageScopeResponse>;

  deleteFileUsageScope(request: DeleteRequest): Observable<GetFileUsageScopeResponse>;

  /** Rules */

  queryFileUsageRule(request: QueryFileUsageRuleRequest): Observable<QueryFileUsageRuleResponse>;

  getFileUsageRule(request: GetRequest): Observable<GetFileUsageRuleResponse>;

  createFileUsageRule(request: CreateFileUsageRuleRequest): Observable<GetFileUsageRuleResponse>;

  updateFileUsageRule(request: UpdateFileUsageRuleRequest): Observable<GetFileUsageRuleResponse>;

  deleteFileUsageRule(request: DeleteRequest): Observable<GetFileUsageRuleResponse>;
}

export interface FilesController {
  /** Files */

  queryFile(request: QueryFileRequest): Promise<QueryFileResponse> | Observable<QueryFileResponse> | QueryFileResponse;

  getFile(request: GetRequest): Promise<GetFileResponse> | Observable<GetFileResponse> | GetFileResponse;

  createFile(request: CreateFileRequest): Promise<GetFileResponse> | Observable<GetFileResponse> | GetFileResponse;

  deleteFile(request: DeleteRequest): Promise<GetFileResponse> | Observable<GetFileResponse> | GetFileResponse;

  /** Scope */

  queryFileUsageScope(
    request: QueryFileUsageScopeRequest,
  ): Promise<QueryFileUsageScopeResponse> | Observable<QueryFileUsageScopeResponse> | QueryFileUsageScopeResponse;

  getFileUsageScope(
    request: GetRequest,
  ): Promise<GetFileUsageScopeResponse> | Observable<GetFileUsageScopeResponse> | GetFileUsageScopeResponse;

  createFileUsageScope(
    request: CreateFileUsageScopeRequest,
  ): Promise<GetFileUsageScopeResponse> | Observable<GetFileUsageScopeResponse> | GetFileUsageScopeResponse;

  updateFileUsageScope(
    request: UpdateFileUsageScopeRequest,
  ): Promise<GetFileUsageScopeResponse> | Observable<GetFileUsageScopeResponse> | GetFileUsageScopeResponse;

  deleteFileUsageScope(
    request: DeleteRequest,
  ): Promise<GetFileUsageScopeResponse> | Observable<GetFileUsageScopeResponse> | GetFileUsageScopeResponse;

  /** Rules */

  queryFileUsageRule(
    request: QueryFileUsageRuleRequest,
  ): Promise<QueryFileUsageRuleResponse> | Observable<QueryFileUsageRuleResponse> | QueryFileUsageRuleResponse;

  getFileUsageRule(
    request: GetRequest,
  ): Promise<GetFileUsageRuleResponse> | Observable<GetFileUsageRuleResponse> | GetFileUsageRuleResponse;

  createFileUsageRule(
    request: CreateFileUsageRuleRequest,
  ): Promise<GetFileUsageRuleResponse> | Observable<GetFileUsageRuleResponse> | GetFileUsageRuleResponse;

  updateFileUsageRule(
    request: UpdateFileUsageRuleRequest,
  ): Promise<GetFileUsageRuleResponse> | Observable<GetFileUsageRuleResponse> | GetFileUsageRuleResponse;

  deleteFileUsageRule(
    request: DeleteRequest,
  ): Promise<GetFileUsageRuleResponse> | Observable<GetFileUsageRuleResponse> | GetFileUsageRuleResponse;
}

export function FilesControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "queryFile",
      "getFile",
      "createFile",
      "deleteFile",
      "queryFileUsageScope",
      "getFileUsageScope",
      "createFileUsageScope",
      "updateFileUsageScope",
      "deleteFileUsageScope",
      "queryFileUsageRule",
      "getFileUsageRule",
      "createFileUsageRule",
      "updateFileUsageRule",
      "deleteFileUsageRule",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("Files", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("Files", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const FILES_SERVICE_NAME = "Files";
