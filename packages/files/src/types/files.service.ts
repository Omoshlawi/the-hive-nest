// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.0
// source: files.service.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "hive.files.v1";

export interface QueryBuilder {
  /** Pagination queries */
  page?: number | undefined;
  limit?:
    | number
    | undefined;
  /** Sord queries */
  orderBy?:
    | string
    | undefined;
  /** Custome rep queries */
  v?: string | undefined;
}

export interface FileMetadata {
  id: string;
  /** S3 object key */
  key: string;
  bucket: string;
  filename: string;
  originalName: string;
  contentType: string;
  size: string;
  isPublic: boolean;
  etag: string;
  url: string;
  signedUrl: string;
  uploadedAt: string;
  customMetadata: { [key: string]: string };
  hash: string;
}

export interface FileMetadata_CustomMetadataEntry {
  key: string;
  value: string;
}

export interface RegisterFileRequest {
  queryBuilder: QueryBuilder | undefined;
  fileMetadata: FileMetadata[];
  uploadedById: string;
  orgarnizationId: string;
  contextType: string;
  category: string;
  provider: RegisterFileRequest_StorageProvider;
  tags: string[];
  uploadTo: string;
}

export enum RegisterFileRequest_StorageProvider {
  LOCAL = 0,
  AWS_S3 = 1,
  GOOGLE_CLOUD = 2,
  AZURE_BLOB = 3,
  CLOUDFLARE_R2 = 4,
  UNRECOGNIZED = -1,
}

export interface RegisteredFile {
  id: string;
  filename: string;
  originalName: string;
  mimeType: string;
  size: string;
  hash: string;
  uploadedById: string;
  organizationId?: string | undefined;
  contextType: string;
  category: string;
  /** JSON as string */
  metadata: string;
  tags: string[];
  /** JSON as string */
  uploadedBy?:
    | string
    | undefined;
  /** JSON as string */
  organization?: string | undefined;
  createdAt: string;
  updatedAt: string;
  lastAccessedAt?: string | undefined;
  expiresAt?: string | undefined;
  voided: boolean;
  storages: FileStorage[];
}

export interface FileStorage {
  id: string;
  fileId: string;
  provider: string;
  storagePath: string;
  storageUrl: string;
  createdAt: string;
}

export interface RegisterFileResponse {
  data: RegisteredFile[];
  metadata: { [key: string]: string };
}

export interface RegisterFileResponse_MetadataEntry {
  key: string;
  value: string;
}

export const HIVE_FILES_V1_PACKAGE_NAME = "hive.files.v1";

export interface FilesClient {
  registerFiles(request: RegisterFileRequest): Observable<RegisterFileResponse>;
}

export interface FilesController {
  registerFiles(
    request: RegisterFileRequest,
  ): Promise<RegisterFileResponse> | Observable<RegisterFileResponse> | RegisterFileResponse;
}

export function FilesControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["registerFiles"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("Files", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("Files", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const FILES_SERVICE_NAME = "Files";
