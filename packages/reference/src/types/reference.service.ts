// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.0
// source: reference.service.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import {
  GetAddressHierarchyResponse,
  QueryAddressHierarchyRequest,
  QueryAddressHierarchyResponse,
} from "./address-hierarchy.message";
import {
  CreateAddressRequest,
  GetAddressResponse,
  QueryAddressRequest,
  QueryAddressResponse,
  UpdateAddressRequest,
} from "./address.message";
import { DeleteRequest, GetRequest } from "./common.message";
import {
  CreateIdentifierSequenceRequest,
  CreateIdentifierSequenceResponse,
  GetIdentifierSequenceResponse,
  QueryIdentifierSequenceRequest,
  QueryIdentifierSequenceResponse,
} from "./reference.message";

export const protobufPackage = "hive.reference.v1";

export const HIVE_REFERENCE_V1_PACKAGE_NAME = "hive.reference.v1";

export interface ReferencesClient {
  /** Identifier Sequence */

  queryIdentifierSequence(request: QueryIdentifierSequenceRequest): Observable<QueryIdentifierSequenceResponse>;

  createIdentifierSequence(request: CreateIdentifierSequenceRequest): Observable<CreateIdentifierSequenceResponse>;

  deleteIdentifierSequence(request: DeleteRequest): Observable<GetIdentifierSequenceResponse>;

  /** Address Hierarchy */

  queryAddressHierarchy(request: QueryAddressHierarchyRequest): Observable<QueryAddressHierarchyResponse>;

  getAddressHierarchy(request: GetRequest): Observable<GetAddressHierarchyResponse>;

  deleteAddressHierarchy(request: DeleteRequest): Observable<GetAddressHierarchyResponse>;

  /** Address */

  queryAddress(request: QueryAddressRequest): Observable<QueryAddressResponse>;

  getAddress(request: GetRequest): Observable<GetAddressResponse>;

  createAddress(request: CreateAddressRequest): Observable<GetAddressResponse>;

  updateAddress(request: UpdateAddressRequest): Observable<GetAddressResponse>;

  deleteAddress(request: DeleteRequest): Observable<GetAddressResponse>;
}

export interface ReferencesController {
  /** Identifier Sequence */

  queryIdentifierSequence(
    request: QueryIdentifierSequenceRequest,
  ):
    | Promise<QueryIdentifierSequenceResponse>
    | Observable<QueryIdentifierSequenceResponse>
    | QueryIdentifierSequenceResponse;

  createIdentifierSequence(
    request: CreateIdentifierSequenceRequest,
  ):
    | Promise<CreateIdentifierSequenceResponse>
    | Observable<CreateIdentifierSequenceResponse>
    | CreateIdentifierSequenceResponse;

  deleteIdentifierSequence(
    request: DeleteRequest,
  ): Promise<GetIdentifierSequenceResponse> | Observable<GetIdentifierSequenceResponse> | GetIdentifierSequenceResponse;

  /** Address Hierarchy */

  queryAddressHierarchy(
    request: QueryAddressHierarchyRequest,
  ): Promise<QueryAddressHierarchyResponse> | Observable<QueryAddressHierarchyResponse> | QueryAddressHierarchyResponse;

  getAddressHierarchy(
    request: GetRequest,
  ): Promise<GetAddressHierarchyResponse> | Observable<GetAddressHierarchyResponse> | GetAddressHierarchyResponse;

  deleteAddressHierarchy(
    request: DeleteRequest,
  ): Promise<GetAddressHierarchyResponse> | Observable<GetAddressHierarchyResponse> | GetAddressHierarchyResponse;

  /** Address */

  queryAddress(
    request: QueryAddressRequest,
  ): Promise<QueryAddressResponse> | Observable<QueryAddressResponse> | QueryAddressResponse;

  getAddress(request: GetRequest): Promise<GetAddressResponse> | Observable<GetAddressResponse> | GetAddressResponse;

  createAddress(
    request: CreateAddressRequest,
  ): Promise<GetAddressResponse> | Observable<GetAddressResponse> | GetAddressResponse;

  updateAddress(
    request: UpdateAddressRequest,
  ): Promise<GetAddressResponse> | Observable<GetAddressResponse> | GetAddressResponse;

  deleteAddress(
    request: DeleteRequest,
  ): Promise<GetAddressResponse> | Observable<GetAddressResponse> | GetAddressResponse;
}

export function ReferencesControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "queryIdentifierSequence",
      "createIdentifierSequence",
      "deleteIdentifierSequence",
      "queryAddressHierarchy",
      "getAddressHierarchy",
      "deleteAddressHierarchy",
      "queryAddress",
      "getAddress",
      "createAddress",
      "updateAddress",
      "deleteAddress",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("References", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("References", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const REFERENCES_SERVICE_NAME = "References";
