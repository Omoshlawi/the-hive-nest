// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.0
// source: reference.service.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { DeleteRequest } from "./common.message";
import {
  CreateIdentifierSequenceRequest,
  GetIdentifierSequenceResponse,
  QueryIdentifierSequenceRequest,
  QueryIdentifierSequenceResponse,
} from "./reference.message";

export const protobufPackage = "hive.reference.v1";

export const HIVE_REFERENCE_V1_PACKAGE_NAME = "hive.reference.v1";

export interface ReferencesClient {
  /** Scope */

  queryIdentifierSequence(request: QueryIdentifierSequenceRequest): Observable<QueryIdentifierSequenceResponse>;

  createIdentifierSequence(request: CreateIdentifierSequenceRequest): Observable<GetIdentifierSequenceResponse>;

  deleteIdentifierSequence(request: DeleteRequest): Observable<GetIdentifierSequenceResponse>;
}

export interface ReferencesController {
  /** Scope */

  queryIdentifierSequence(
    request: QueryIdentifierSequenceRequest,
  ):
    | Promise<QueryIdentifierSequenceResponse>
    | Observable<QueryIdentifierSequenceResponse>
    | QueryIdentifierSequenceResponse;

  createIdentifierSequence(
    request: CreateIdentifierSequenceRequest,
  ): Promise<GetIdentifierSequenceResponse> | Observable<GetIdentifierSequenceResponse> | GetIdentifierSequenceResponse;

  deleteIdentifierSequence(
    request: DeleteRequest,
  ): Promise<GetIdentifierSequenceResponse> | Observable<GetIdentifierSequenceResponse> | GetIdentifierSequenceResponse;
}

export function ReferencesControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["queryIdentifierSequence", "createIdentifierSequence", "deleteIdentifierSequence"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("References", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("References", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const REFERENCES_SERVICE_NAME = "References";
