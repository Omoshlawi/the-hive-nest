// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v3.20.3
// source: identity.service.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "hive.identity.v1";

export interface User {
  id: string;
  name: string;
  email: string;
  emailVerified: boolean;
  image?: string | undefined;
  createdAt: string;
  updatedAt: string;
  username?: string | undefined;
  displayUsername?: string | undefined;
  isAnonymous?: boolean | undefined;
  role?: string | undefined;
  banned?: boolean | undefined;
  banReason: string;
  banExpires: string;
  members: Member[];
  invitations: Invitation[];
}

export interface Organization {
  id: string;
  name: string;
  slug?: string | undefined;
  logo?: string | undefined;
  createdAt: string;
  metadata?: string | undefined;
  members: Member[];
  invitations: Invitation[];
}

export interface Member {
  id: string;
  organizationId: string;
  organization?: Organization | undefined;
  userId: string;
  user?: User | undefined;
  role: string;
  createdAt: string;
}

export interface Invitation {
  id: string;
  organizationId: string;
  organization?: Organization | undefined;
  email: string;
  role?: string | undefined;
  status: string;
  expiresAt: string;
  inviterId: string;
  user?: User | undefined;
}

export interface GetUserRequest {
  id: string;
  rep?: string | undefined;
}

export interface GetOrganizationRequest {
  id: string;
}

export interface Empty {
}

export interface ListOrganizationsRequest {
  userId: string;
}

export interface ListOrganizationsResponse {
  organizations: Organization[];
}

export interface ListMembersRequest {
  organizationId: string;
}

export interface ListMembersResponse {
  members: Member[];
}

export interface ListInvitationsRequest {
  organizationId: string;
}

export interface ListInvitationsResponse {
  invitations: Invitation[];
}

export interface GetMemberRequest {
  id: string;
}

export interface GetInvitationRequest {
  id: string;
}

export const HIVE_IDENTITY_V1_PACKAGE_NAME = "hive.identity.v1";

export interface IdentityClient {
  getUser(request: GetUserRequest): Observable<User>;

  getOrganization(request: GetOrganizationRequest): Observable<Organization>;

  listOrganizations(request: ListOrganizationsRequest): Observable<ListOrganizationsResponse>;

  listMembers(request: ListMembersRequest): Observable<ListMembersResponse>;

  listInvitations(request: ListInvitationsRequest): Observable<ListInvitationsResponse>;

  getMember(request: GetMemberRequest): Observable<Member>;

  getInvitation(request: GetInvitationRequest): Observable<Invitation>;
}

export interface IdentityController {
  getUser(request: GetUserRequest): Promise<User> | Observable<User> | User;

  getOrganization(request: GetOrganizationRequest): Promise<Organization> | Observable<Organization> | Organization;

  listOrganizations(
    request: ListOrganizationsRequest,
  ): Promise<ListOrganizationsResponse> | Observable<ListOrganizationsResponse> | ListOrganizationsResponse;

  listMembers(
    request: ListMembersRequest,
  ): Promise<ListMembersResponse> | Observable<ListMembersResponse> | ListMembersResponse;

  listInvitations(
    request: ListInvitationsRequest,
  ): Promise<ListInvitationsResponse> | Observable<ListInvitationsResponse> | ListInvitationsResponse;

  getMember(request: GetMemberRequest): Promise<Member> | Observable<Member> | Member;

  getInvitation(request: GetInvitationRequest): Promise<Invitation> | Observable<Invitation> | Invitation;
}

export function IdentityControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "getUser",
      "getOrganization",
      "listOrganizations",
      "listMembers",
      "listInvitations",
      "getMember",
      "getInvitation",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("Identity", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("Identity", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const IDENTITY_SERVICE_NAME = "Identity";
