// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.0
// source: virtual-tour.service.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { DeleteRequest, GetRequest } from "./common.message";
import {
  CreateSceneRequest,
  GetSceneResponse,
  QuerySceneRequest,
  QuerySceneResponse,
  UpdateSceneRequest,
} from "./scene.message";
import {
  CreateTourRequest,
  GetTourResponse,
  QueryTourRequest,
  QueryTourResponse,
  UpdateTourRequest,
} from "./tour.message";

export const protobufPackage = "hive.virtualtour.v1";

export const HIVE_VIRTUALTOUR_V1_PACKAGE_NAME = "hive.virtualtour.v1";

export interface VirtualToursClient {
  /** Tour */

  queryTour(request: QueryTourRequest): Observable<QueryTourResponse>;

  getTour(request: GetRequest): Observable<GetTourResponse>;

  createTour(request: CreateTourRequest): Observable<GetTourResponse>;

  updateTour(request: UpdateTourRequest): Observable<GetTourResponse>;

  deleteTour(request: DeleteRequest): Observable<GetTourResponse>;

  /** Scene */

  queryScene(request: QuerySceneRequest): Observable<QuerySceneResponse>;

  getScene(request: GetRequest): Observable<GetSceneResponse>;

  createScene(request: CreateSceneRequest): Observable<GetSceneResponse>;

  updateScene(request: UpdateSceneRequest): Observable<GetSceneResponse>;

  deleteScene(request: DeleteRequest): Observable<GetSceneResponse>;
}

export interface VirtualToursController {
  /** Tour */

  queryTour(request: QueryTourRequest): Promise<QueryTourResponse> | Observable<QueryTourResponse> | QueryTourResponse;

  getTour(request: GetRequest): Promise<GetTourResponse> | Observable<GetTourResponse> | GetTourResponse;

  createTour(request: CreateTourRequest): Promise<GetTourResponse> | Observable<GetTourResponse> | GetTourResponse;

  updateTour(request: UpdateTourRequest): Promise<GetTourResponse> | Observable<GetTourResponse> | GetTourResponse;

  deleteTour(request: DeleteRequest): Promise<GetTourResponse> | Observable<GetTourResponse> | GetTourResponse;

  /** Scene */

  queryScene(
    request: QuerySceneRequest,
  ): Promise<QuerySceneResponse> | Observable<QuerySceneResponse> | QuerySceneResponse;

  getScene(request: GetRequest): Promise<GetSceneResponse> | Observable<GetSceneResponse> | GetSceneResponse;

  createScene(request: CreateSceneRequest): Promise<GetSceneResponse> | Observable<GetSceneResponse> | GetSceneResponse;

  updateScene(request: UpdateSceneRequest): Promise<GetSceneResponse> | Observable<GetSceneResponse> | GetSceneResponse;

  deleteScene(request: DeleteRequest): Promise<GetSceneResponse> | Observable<GetSceneResponse> | GetSceneResponse;
}

export function VirtualToursControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "queryTour",
      "getTour",
      "createTour",
      "updateTour",
      "deleteTour",
      "queryScene",
      "getScene",
      "createScene",
      "updateScene",
      "deleteScene",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("VirtualTours", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("VirtualTours", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const VIRTUAL_TOURS_SERVICE_NAME = "VirtualTours";
