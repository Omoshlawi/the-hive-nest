// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.0
// source: registry.service.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "hive.registry.v1";

export enum ServiceStatus {
  UNKNOWN = 0,
  HEALTHY = 1,
  UNHEALTHY = 2,
  UNRECOGNIZED = -1,
}

export interface ServiceRegistration {
  id: string;
  name: string;
  version: string;
  /** time created */
  timestamp: string;
  tags: string[];
  metadata: { [key: string]: string };
  endpoints: Endpoint[];
}

export interface ServiceRegistration_MetadataEntry {
  key: string;
  value: string;
}

export interface Endpoint {
  host: string;
  port: number;
  protocol: string;
  metadata: { [key: string]: string };
}

export interface Endpoint_MetadataEntry {
  key: string;
  value: string;
}

export interface RegisterServiceRequest {
  name: string;
  version: string;
  tags: string[];
  metadata: { [key: string]: string };
  endpoints: Endpoint[];
}

export interface RegisterServiceRequest_MetadataEntry {
  key: string;
  value: string;
}

export interface Empty {
}

export interface QueryServicesRequest {
  tags: string[];
  name?: string | undefined;
  version?: string | undefined;
  metadata: { [key: string]: string };
}

export interface QueryServicesRequest_MetadataEntry {
  key: string;
  value: string;
}

export interface ListServicesResponse {
  services: ServiceRegistration[];
}

export interface UnregisterServiceRequest {
  id: string;
}

export interface StorageStatus {
  type: string;
  healthy: boolean;
}

export interface ServiceHealthResponse {
  status: ServiceStatus;
  timestamp: string;
  uptime: number;
  storage: StorageStatus | undefined;
}

/** Heartbeat Messages */
export interface HeartbeatRequest {
  serviceId: string;
  tags: string[];
  metadata: { [key: string]: string };
  endpoints: Endpoint[];
}

export interface HeartbeatRequest_MetadataEntry {
  key: string;
  value: string;
}

export interface HeartbeatResponse {
  acknowledged: boolean;
  message: string;
  service: ServiceRegistration | undefined;
}

export interface ServiceUpdate {
  type: ServiceUpdate_UpdateType;
  service: ServiceRegistration | undefined;
}

export enum ServiceUpdate_UpdateType {
  ADDED = 0,
  UPDATED = 1,
  REMOVED = 2,
  UNRECOGNIZED = -1,
}

export const HIVE_REGISTRY_V1_PACKAGE_NAME = "hive.registry.v1";

export interface RegistryClient {
  registerService(request: RegisterServiceRequest): Observable<ServiceRegistration>;

  getService(request: QueryServicesRequest): Observable<ServiceRegistration>;

  listServices(request: QueryServicesRequest): Observable<ListServicesResponse>;

  unregisterService(request: UnregisterServiceRequest): Observable<ServiceRegistration>;

  healthCheck(request: Empty): Observable<ServiceHealthResponse>;

  heartbeat(request: HeartbeatRequest): Observable<HeartbeatResponse>;

  watchServices(request: Empty): Observable<ServiceUpdate>;
}

export interface RegistryController {
  registerService(
    request: RegisterServiceRequest,
  ): Promise<ServiceRegistration> | Observable<ServiceRegistration> | ServiceRegistration;

  getService(
    request: QueryServicesRequest,
  ): Promise<ServiceRegistration> | Observable<ServiceRegistration> | ServiceRegistration;

  listServices(
    request: QueryServicesRequest,
  ): Promise<ListServicesResponse> | Observable<ListServicesResponse> | ListServicesResponse;

  unregisterService(
    request: UnregisterServiceRequest,
  ): Promise<ServiceRegistration> | Observable<ServiceRegistration> | ServiceRegistration;

  healthCheck(
    request: Empty,
  ): Promise<ServiceHealthResponse> | Observable<ServiceHealthResponse> | ServiceHealthResponse;

  heartbeat(request: HeartbeatRequest): Promise<HeartbeatResponse> | Observable<HeartbeatResponse> | HeartbeatResponse;

  watchServices(request: Empty): Observable<ServiceUpdate>;
}

export function RegistryControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "registerService",
      "getService",
      "listServices",
      "unregisterService",
      "healthCheck",
      "heartbeat",
      "watchServices",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("Registry", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("Registry", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const REGISTRY_SERVICE_NAME = "Registry";
