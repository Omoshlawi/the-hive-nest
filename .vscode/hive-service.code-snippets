{
  "NestJS CRUD Service with Prisma": {
    "prefix": "nest-crud-service",
    "body": [
      "import {",
      "  CustomRepresentationService,",
      "  FunctionFirstArgument,",
      "  PaginationService,",
      "  SortService,",
      "} from '@hive/common';",
      "import {",
      "  Create${1:Entity}Request,",
      "  Delete${1:Entity}Request,",
      "  Get${1:Entity}Request,",
      "  Query${1:Entity}Request,",
      "  Update${1:Entity}Request,",
      "} from '@hive/${2:module}';",
      "import { Injectable } from '@nestjs/common';",
      "import { ${1:Entity}, Prisma } from '../../generated/prisma';",
      "import { pick } from 'lodash';",
      "import { PrismaService } from '../prisma/prisma.service';",
      "",
      "@Injectable()",
      "export class ${1:Entity}Service {",
      "  constructor(",
      "    private readonly prismaService: PrismaService,",
      "    private readonly sortService: SortService,",
      "    private readonly paginationService: PaginationService,",
      "    private readonly representationService: CustomRepresentationService,",
      "  ) {}",
      "",
      "  async getAll(query: Query${1:Entity}Request) {",
      "    const dbQuery: FunctionFirstArgument<",
      "      typeof this.prismaService.${3:${1/(.*)/${1:/downcase}/}}.findMany",
      "    > = {",
      "      where: {",
      "        AND: [",
      "          { voided: query?.includeVoided ? undefined : false },",
      "          {",
      "            OR: query.search",
      "              ? [{ ${4:name}: { contains: query.search } }]",
      "              : undefined,",
      "          },",
      "        ],",
      "      },",
      "      ...this.paginationService.buildPaginationQuery(query.queryBuilder),",
      "      ...this.representationService.buildCustomRepresentationQuery(",
      "        query.queryBuilder?.v,",
      "      ),",
      "      ...this.sortService.buildSortQuery(query.queryBuilder?.orderBy),",
      "    };",
      "    const [data, totalCount] = await Promise.all([",
      "      this.prismaService.${3:${1/(.*)/${1:/downcase}/}}.findMany(dbQuery),",
      "      this.prismaService.${3:${1/(.*)/${1:/downcase}/}}.count(pick(dbQuery, 'where')),",
      "    ]);",
      "    return {",
      "      data,",
      "      metadata: JSON.stringify({ totalCount: totalCount }),",
      "    };",
      "  }",
      "",
      "  async getById(query: Get${1:Entity}Request) {",
      "    const data = await this.prismaService.${3:${1/(.*)/${1:/downcase}/}}.findUnique({",
      "      where: {",
      "        id: query.id,",
      "      },",
      "      ...this.representationService.buildCustomRepresentationQuery(",
      "        query.queryBuilder?.v,",
      "      ),",
      "    });",
      "    return {",
      "      data,",
      "      metadata: JSON.stringify({}),",
      "    };",
      "  }",
      "",
      "  async create(query: Create${1:Entity}Request) {",
      "    const { queryBuilder, context: _, ...props } = query;",
      "    const data = await this.prismaService.${3:${1/(.*)/${1:/downcase}/}}.create({",
      "      data: props as Prisma.${1:Entity}CreateInput,",
      "      ...this.representationService.buildCustomRepresentationQuery(",
      "        queryBuilder?.v,",
      "      ),",
      "    });",
      "",
      "    return {",
      "      data,",
      "      metadata: JSON.stringify({}),",
      "    };",
      "  }",
      "",
      "  async update(query: Update${1:Entity}Request) {",
      "    const { queryBuilder, id, context: _, ...props } = query;",
      "    const data = await this.prismaService.${3:${1/(.*)/${1:/downcase}/}}.update({",
      "      where: { id },",
      "      data: props as Prisma.${1:Entity}UpdateInput,",
      "      ...this.representationService.buildCustomRepresentationQuery(",
      "        queryBuilder?.v,",
      "      ),",
      "    });",
      "",
      "    return {",
      "      data,",
      "      metadata: JSON.stringify({}),",
      "    };",
      "  }",
      "",
      "  async delete(query: Delete${1:Entity}Request) {",
      "    const { id, purge, queryBuilder } = query;",
      "    let data: ${1:Entity};",
      "    if (purge) {",
      "      data = await this.prismaService.${3:${1/(.*)/${1:/downcase}/}}.delete({",
      "        where: { id },",
      "        ...this.representationService.buildCustomRepresentationQuery(",
      "          queryBuilder?.v,",
      "        ),",
      "      });",
      "    } else {",
      "      data = await this.prismaService.${3:${1/(.*)/${1:/downcase}/}}.update({",
      "        where: { id },",
      "        data: { voided: true },",
      "        ...this.representationService.buildCustomRepresentationQuery(",
      "          queryBuilder?.v,",
      "        ),",
      "      });",
      "    }",
      "    return {",
      "      data,",
      "      metadata: JSON.stringify({}),",
      "    };",
      "  }",
      "}",
      ""
    ],
    "description": "Generate a complete NestJS CRUD service with Prisma"
  }
}