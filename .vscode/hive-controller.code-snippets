{
  "NestJS CRUD Controller": {
    "prefix": "nest-crud-controller",
    "body": [
      "/* eslint-disable @typescript-eslint/no-unsafe-assignment */",
      "/* eslint-disable @typescript-eslint/no-unsafe-call */",
      "import {",
      "  ApiErrorsResponse,",
      "  CustomRepresentationQueryDto,",
      "  DeleteQueryDto,",
      "} from '@hive/common';",
      "import {",
      "  Create${1:Entity}Dto,",
      "  Get${1:Entity}ResponseDto,",
      "  Hive${2:Service}ServiceClient,",
      "  Query${1:Entity}Dto,",
      "  Query${1:Entity}ResponseDto,",
      "  Update${1:Entity}Dto,",
      "} from '@hive/${3:package}';",
      "import {",
      "  Body,",
      "  Controller,",
      "  Delete,",
      "  Get,",
      "  Param,",
      "  ParseUUIDPipe,",
      "  Patch,",
      "  Post,",
      "  Query,",
      "  UseInterceptors,",
      "} from '@nestjs/common';",
      "import {",
      "  ApiCreatedResponse,",
      "  ApiOkResponse,",
      "  ApiOperation,",
      "} from '@nestjs/swagger';",
      "import {",
      "  ApiDetailTransformInterceptor,",
      "  ApiListTransformInterceptor,",
      "} from '../app.interceptors';",
      "",
      "@Controller('${4:entities}')",
      "export class ${1:Entity}Controller {",
      "  constructor(private ${5:serviceInstance}: Hive${2:Service}ServiceClient) {}",
      "",
      "  @Get('/')",
      "  @UseInterceptors(ApiListTransformInterceptor)",
      "  @ApiOperation({ summary: 'Query ${1:Entity}' })",
      "  @ApiOkResponse({ type: Query${1:Entity}ResponseDto })",
      "  @ApiErrorsResponse()",
      "  query${1:Entity}(@Query() query: Query${1:Entity}Dto) {",
      "    return this.${5:serviceInstance}.${6:entityService}.query${1:Entity}({",
      "      queryBuilder: {",
      "        limit: query.limit,",
      "        orderBy: query.orderBy,",
      "        page: query.page,",
      "        v: query.v,",
      "      },",
      "      includeVoided: query.includeVoided,",
      "      search: query.search,",
      "    });",
      "  }",
      "",
      "  @Post('/')",
      "  @UseInterceptors(ApiDetailTransformInterceptor)",
      "  @ApiOperation({ summary: 'Create ${1:Entity}' })",
      "  @ApiCreatedResponse({ type: Get${1:Entity}ResponseDto })",
      "  @ApiErrorsResponse({ badRequest: true })",
      "  create${1:Entity}(",
      "    @Body() create${1:Entity}Dto: Create${1:Entity}Dto,",
      "    @Query() query: CustomRepresentationQueryDto,",
      "  ) {",
      "    return this.${5:serviceInstance}.${6:entityService}.create${1:Entity}({",
      "      queryBuilder: {",
      "        v: query.v,",
      "      },",
      "      ...create${1:Entity}Dto,",
      "    });",
      "  }",
      "",
      "  @Get('/:id')",
      "  @UseInterceptors(ApiDetailTransformInterceptor)",
      "  @ApiOperation({ summary: 'Get ${1:Entity}' })",
      "  @ApiOkResponse({ type: Get${1:Entity}ResponseDto })",
      "  @ApiErrorsResponse()",
      "  get${1:Entity}(",
      "    @Param('id', ParseUUIDPipe) id: string,",
      "    @Query() query: CustomRepresentationQueryDto,",
      "  ) {",
      "    return this.${5:serviceInstance}.${6:entityService}.get${1:Entity}({",
      "      id,",
      "      queryBuilder: query,",
      "    });",
      "  }",
      "",
      "  @Patch('/:id')",
      "  @UseInterceptors(ApiDetailTransformInterceptor)",
      "  @ApiOperation({ summary: 'Update ${1:Entity}' })",
      "  @ApiOkResponse({ type: Get${1:Entity}ResponseDto })",
      "  @ApiErrorsResponse({ badRequest: true })",
      "  update${1:Entity}(",
      "    @Param('id', ParseUUIDPipe) id: string,",
      "    @Body() update${1:Entity}Dto: Update${1:Entity}Dto,",
      "    @Query() query: CustomRepresentationQueryDto,",
      "  ) {",
      "    return this.${5:serviceInstance}.${6:entityService}.update${1:Entity}({",
      "      id,",
      "      queryBuilder: { v: query?.v },",
      "      ...update${1:Entity}Dto,",
      "    });",
      "  }",
      "",
      "  @Delete('/:id')",
      "  @UseInterceptors(ApiDetailTransformInterceptor)",
      "  @ApiOperation({ summary: 'Delete ${1:Entity}' })",
      "  @ApiOkResponse({ type: Get${1:Entity}ResponseDto })",
      "  @ApiErrorsResponse()",
      "  delete${1:Entity}(",
      "    @Param('id', ParseUUIDPipe) id: string,",
      "    @Query() query: DeleteQueryDto,",
      "  ) {",
      "    return this.${5:serviceInstance}.${6:entityService}.delete${1:Entity}({",
      "      id,",
      "      queryBuilder: { v: query.v },",
      "      purge: query.purge,",
      "    });",
      "  }",
      "}",
      ""
    ],
    "description": "NestJS CRUD controller with full REST operations"
  }
}