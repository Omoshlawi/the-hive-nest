// Prisma schema with proper file deduplication

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Physical file storage (deduplicated by hash)
model FileBlob {
  id       String @id @default(uuid()) @db.Uuid
  hash     String @unique // SHA-256 or similar
  size     BigInt
  mimeType String

  // Physical storage locations
  remoteId    String  @unique
  storagePath String
  storageUrl  String?
  metadata    String? @db.Text
  filename     String // Name file is saved with

  // Reference count for cleanup
  references FileMetadata[]

  createdAt DateTime @default(now())

  @@index([hash])
  @@map("file_blobs")
}

// User-specific file metadata (can have duplicates)
model FileMetadata {
  id String @id @default(uuid()) @db.Uuid

  // Reference to physical file
  blobId String   @db.Uuid
  blob   FileBlob @relation(fields: [blobId], references: [id], onDelete: Restrict)

  // User-specific information
  originalName String // Original upload name

  // Context and relationships
  relatedModelId   String
  relatedModelName String
  purpose          String

  // Ownership
  uploadedById   String
  organizationId String?

  // User-specific metadata
  metadata    String?  @db.Text
  tags        String[]
  description String?

  // Cached user/org data
  uploadedBy   Json?
  organization Json?

  // Lifecycle
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  lastAccessedAt DateTime?
  expiresAt      DateTime?
  voided         Boolean   @default(false)

  // Indexes
  @@index([blobId])
  @@index([uploadedById])
  @@index([organizationId])
  @@index([relatedModelName, relatedModelId])
  @@index([createdAt])
  @@index([tags])
  @@map("file_metadata")
}

model FileUsageScope {
  id          String          @id @default(uuid()) @db.Uuid
  modelName   String
  purpose     String
  description String?
  voided      Boolean         @default(false)
  createdAt   DateTime        @default(now())
  rules       FileUsageRule[]

  @@unique([modelName, purpose])
  @@map("file_usage_scopes")
}

model FileUsageRule {
  id        String         @id @default(uuid()) @db.Uuid
  scopeId   String         @db.Uuid
  scope     FileUsageScope @relation(fields: [scopeId], references: [id], onDelete: Cascade)
  maxFiles  Int
  voided    Boolean        @default(false)
  createdAt DateTime       @default(now())

  @@map("file_usage_rules")
}
