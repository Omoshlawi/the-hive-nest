// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma" // Generated folder must be added to assets for watch and copy to dist folder
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model File {
  id           String @id @default(uuid()) @db.Uuid
  filename     String
  originalName String
  mimeType     String
  size         BigInt // In bytes
  hash         String @unique // For deduplication 

  relatedModelId   String // The specific instance ID of the model
  relatedModelName String // Which model/entity uses the file (e.g. User, Property, Listing)
  purpose          String // Purpose of the file within that model (e.g. 'avatar', 'gallery', 'document')

  // Ownership and Context
  uploadedById   String // Better auth user uses no uuid for id fields
  organizationId String? // NULL for personal files

  // Metadata
  metadata Json? // Flexible JSON for file-specific data
  tags     String[] // For categorization and search

  // Relationships
  uploadedBy   Json? // Minimal cached user details
  organization Json? // Minimal cached organization details

  // Timestamps
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  lastAccessedAt DateTime?
  expiresAt      DateTime? // For temporary files
  voided         Boolean       @default(false)
  storages       FileStorage[]

  // Indexes for performance
  @@index([uploadedById])
  @@index([organizationId])
  @@index([createdAt])
  @@index([hash]) // For deduplication queries
  @@index([tags])
  @@map("files")
}

// multi-provider storage (e.g., store a file in S3 + R2 for redundancy)
model FileStorage {
  id          String          @id @default(uuid()) @db.Uuid
  fileId      String          @db.Uuid
  provider    StorageProvider
  remoteId    String          @unique
  storagePath String
  storageUrl  String? // CDN/public URL
  createdAt   DateTime        @default(now())

  file File @relation(fields: [fileId], references: [id], onDelete: Cascade)

  @@map("file_storage")
}

model FileUsageScope {
  id          String  @id @default(uuid()) @db.Uuid
  modelName   String // e.g User,Property,e.t.c
  purpose     String // e.g. "avatar", "gallery"
  description String?

  voided    Boolean         @default(false)
  createdAt DateTime        @default(now())
  rules     FileUsageRule[]

  @@unique([modelName, purpose])
}

model FileUsageRule {
  id        String         @id @default(uuid()) @db.Uuid
  scopeId   String         @db.Uuid
  scope     FileUsageScope @relation(fields: [scopeId], references: [id], onDelete: Cascade)
  // tier      String?
  maxFiles  Int
  voided    Boolean        @default(false)
  createdAt DateTime       @default(now())
}

// Handled by tags
// enum FileCategory {
//   AVATAR // Profile pictures (always free)
//   DOCUMENT // Business documents
//   IMAGE // General images
//   VIDEO // Video files
//   AUDIO // Audio files
//   ARCHIVE // Zip, tar, etc.
//   CODE // Source code files
//   OTHER // Miscellaneous
// }

enum StorageProvider {
  LOCAL
  AWS_S3
  GOOGLE_CLOUD
  AZURE_BLOB
  CLOUDFLARE_R2
}
